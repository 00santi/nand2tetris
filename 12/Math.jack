/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    function void init() {
        return;
    }

    function int multiply(int x, int y) {
        var int a, b, result;
        let a = Math.abs(x);
        let b = Math.abs(y);
        let result = 0;
        while(a > 0) {
           let result = result + b;
           let a = a - 1;
        }
        if(Math.same_sign(x, y)) { return result; }
        else { return -result; }
    }

    function boolean same_sign(int x, int y) {
        if(x > 0) {
            if(y > 0) { return true; }
        }
        if(x < 0) {
            if(y < 0) { return true; }
        }
        return false;
    }

    function int divide(int x, int y) {
        var int a, b, result;
        if(y = 0) { return -1; }

        let a = Math.abs(x);
        let b = Math.abs(y);
        let result = 0;
        while(a + 1 > b) {
            let a = a - b;
            let result = result + 1;
        }
        if(Math.same_sign(x, y)) { return result; }
        return -result;
    }

    function int sqrt(int x) {
        var int a;
        if(x < 0) { return -1; }
        if(x = 0) { return 0; }
        let a = 1;
        while(a * a < x + 1) {
            if(a * a = x) { return a; }
            let a = a + 1;
        }
        return a - 1;
    }

    function int max(int a, int b) {
        if(a > b) { return a; }
        else { return b; }
    }

    function int min(int a, int b) {
        if(a < b) { return a; }
        else { return b; }
    }

    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }
}
